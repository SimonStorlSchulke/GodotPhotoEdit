[gd_scene load_steps=6 format=2]

[ext_resource path="res://maintheme.tres" type="Theme" id=1]
[ext_resource path="res://code/ui/Viewer.cs" type="Script" id=5]

[sub_resource type="CSharpScript" id=1]
script/source = "using System.Collections.Generic;
using Godot;
using System;

public class AddNode : MenuButton {
    static PopupMenu popup;
    static NodeBase[] Nodes;

    static List<PackedScene> graphNodes = new List<PackedScene>();
    static GraphEdit ge;
    int nodeCount;

    public override void _Ready() {
        popup = GetPopup();
        ge = GetNode<GraphEdit>(\"../../../GraphEdit\");
        CollectGraphNodes();
    }

    void AddGraphNode(int ID) {
        var graphNode = (NodeBase)graphNodes[ID].Instance();
        graphNode.Name = nodeCount + graphNode.nodename;
        ge.AddChild(graphNode);
        GD.Print(ge.GetChildren());
        nodeCount++;
    }

    //Collect Nodes from nodes directory and add them to the List
    void CollectGraphNodes() {
        Directory nodeDir = new Directory();

        //Iterate through nodes folder
        if (nodeDir.Open(\"res://nodes\") == Error.Ok) {
            nodeDir.ListDirBegin();
            string filename = nodeDir.GetNext();
            while (filename != \"\") {
                if (!nodeDir.CurrentIsDir()) {

                    //Add to nodes List
                    graphNodes.Add(GD.Load<PackedScene>(\"res://nodes/\" + filename));

                    //add to Menu
                    filename = filename.Remove(filename.Length - 5); //Remove .tscn extension
                    popup.AddItem(filename);
                }
                filename = nodeDir.GetNext();
            }
        }
        popup.Connect(\"id_pressed\", this, nameof(AddGraphNode));
    }
}
"

[sub_resource type="CSharpScript" id=2]
script/source = "using Godot;
using System;
using System.Collections.Generic;

public class Parser : Node {

    public static NodeOutput activeOutput;

    Connections connections;

    public override void _Ready() {
        connections = GetParent().GetNode<Connections>(\"Connections\");
    }

    void OnEvaluateTreePressed() {
        GD.Print(\"EVALUATE!\");
        connections.generateConnectionList();


        Image final = new Image();

        foreach (var c in connections.get())
        {
            if (c.to is NodeOutput) {

            }
        }
    }
}"

[sub_resource type="CSharpScript" id=3]
script/source = "using Godot;
using System;
using System.Collections.Generic;

public class Connection {
    public NodeBase from;
    public int fromSlot;

    public NodeBase to;
    public int toSlot;

    public Connection(NodeBase from, int fromSlot, NodeBase to, int toSlot) {
        this.from = from;
        this.fromSlot = fromSlot;
        this.to = to;
        this.toSlot = toSlot;
    }
    public Connection() { }
}

public class Connections : Node {
    GraphEdit ge;
    List<Connection> connections = new List<Connection>();

    public override void _Ready() {
        ge = GetParent<GraphEdit>();
    }

    public List<Connection> get() => connections;

    public void generateConnectionList() {

        foreach (Godot.Collections.Dictionary connection in ge.GetConnectionList()) {
            var en = connection.GetEnumerator();
            Connection c = new Connection();
            while (en.MoveNext()) {
                switch ((string)en.Key) {
                    case (\"from\"):
                        c.from = ge.GetNode<NodeBase>((string)en.Value);
                        break;
                    case (\"from_port\"):
                        c.fromSlot = (int)en.Value;
                        break;
                    case (\"to\"):
                        c.to = ge.GetNode<NodeBase>((string)en.Value);
                        break;
                    case (\"to_port\"):
                        c.fromSlot = (int)en.Value;
                        break;
                    default:
                        break;
                }
            }
            //TODO Exception handling
            connections.Add(c);
        }
    }
}"

[node name="Main" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/separation = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Topbar" type="Panel" parent="VBoxContainer"]
margin_right = 875.0
margin_bottom = 24.0
rect_min_size = Vector2( 0, 24 )

[node name="Menus" type="HBoxContainer" parent="VBoxContainer/Topbar"]
margin_right = 191.0
margin_bottom = 24.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="File" type="MenuButton" parent="VBoxContainer/Topbar/Menus"]
margin_right = 35.0
margin_bottom = 24.0
text = "File"
items = [ "Open Graph", null, 0, false, false, 0, 0, null, "", false, "Save as", null, 0, false, false, 1, 0, null, "", false, "Save", null, 0, false, false, 2, 0, null, "", false ]
switch_on_hover = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Edit" type="MenuButton" parent="VBoxContainer/Topbar/Menus"]
margin_left = 39.0
margin_right = 75.0
margin_bottom = 24.0
text = "Edit"
switch_on_hover = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="File3" type="MenuButton" parent="VBoxContainer/Topbar/Menus"]
margin_left = 79.0
margin_right = 114.0
margin_bottom = 24.0
text = "File"
switch_on_hover = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="File4" type="MenuButton" parent="VBoxContainer/Topbar/Menus"]
margin_left = 118.0
margin_right = 153.0
margin_bottom = 24.0
text = "File"
switch_on_hover = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="File5" type="MenuButton" parent="VBoxContainer/Topbar/Menus"]
margin_left = 157.0
margin_right = 192.0
margin_bottom = 24.0
text = "File"
switch_on_hover = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSplitContainer" type="HSplitContainer" parent="VBoxContainer"]
margin_top = 24.0
margin_right = 875.0
margin_bottom = 700.0
size_flags_vertical = 3

[node name="VSplitContainer" type="VSplitContainer" parent="VBoxContainer/HSplitContainer"]
margin_right = 567.0
margin_bottom = 676.0
size_flags_horizontal = 3

[node name="ViewerContainer" type="CenterContainer" parent="VBoxContainer/HSplitContainer/VSplitContainer"]
margin_right = 567.0
margin_bottom = 334.0
rect_clip_content = true
size_flags_vertical = 3

[node name="Viewer" type="Sprite" parent="VBoxContainer/HSplitContainer/VSplitContainer/ViewerContainer"]
position = Vector2( 367.696, 154.039 )
scale = Vector2( 0.3, 0.3 )
z_index = -1
script = ExtResource( 5 )

[node name="Nodeeditor" type="VBoxContainer" parent="VBoxContainer/HSplitContainer/VSplitContainer"]
margin_top = 342.0
margin_right = 567.0
margin_bottom = 676.0
size_flags_vertical = 3
custom_constants/separation = 0

[node name="Header" type="Panel" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor"]
margin_right = 567.0
margin_bottom = 24.0
rect_min_size = Vector2( 0, 24 )

[node name="Menus" type="HBoxContainer" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/Header"]
margin_right = 40.0
margin_bottom = 24.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AddNode" type="MenuButton" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/Header/Menus"]
margin_right = 75.0
margin_bottom = 24.0
text = "Add Node"
script = SubResource( 1 )

[node name="Button" type="Button" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/Header/Menus"]
margin_left = 79.0
margin_right = 176.0
margin_bottom = 24.0
text = "Evaluate Tree"

[node name="GraphEdit" type="GraphEdit" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor"]
margin_top = 24.0
margin_right = 567.0
margin_bottom = 334.0
size_flags_vertical = 3
right_disconnects = true
scroll_offset = Vector2( -525, -238 )

[node name="Parser" type="Node" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit"]
script = SubResource( 2 )

[node name="Connections" type="Node" parent="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit"]
script = SubResource( 3 )

[node name="Sidebar" type="Panel" parent="VBoxContainer/HSplitContainer"]
margin_left = 575.0
margin_right = 875.0
margin_bottom = 676.0
rect_min_size = Vector2( 300, 0 )

[node name="Label" type="Label" parent="VBoxContainer/HSplitContainer/Sidebar"]
margin_right = 8.0
margin_bottom = 22.0
text = "Inspector"
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/Header/Menus/Button" to="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit/Parser" method="OnEvaluateTreePressed"]
[connection signal="connection_request" from="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit" to="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit" method="onConnectionRequest"]
[connection signal="disconnection_request" from="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit" to="VBoxContainer/HSplitContainer/VSplitContainer/Nodeeditor/GraphEdit" method="onDisconnectionRequest"]
